"""Function called to initialize a set of parameters for the GORi setup and analysis.

    2025/05/22 @yanisaspic"""

from typing import Any
from gori.wrappers import (
    ancestors_wrapper,
    annotations_wrapper,
    descendants_wrapper,
    download_wrapper,
    headers_wrapper,
    inverse_translate_wrapper,
    load_wrapper,
    resources_wrapper,
    roots_wrapper,
    setup_wrapper,
    terms_wrapper,
    translate_wrapper,
    urls_wrapper,
)


def _get_stopwords() -> set[str]:
    """Get a set of stopwords that should not be used in GORi.

    It corresponds to a modified version of the NLTK stopwords.

    Returns
        A set of stopwords.
    """
    return {
        "-",
        "a",
        "about",
        "above",
        "across",
        "after",
        "again",
        "against",
        "ain",
        "all",
        "am",
        "an",
        "and",
        "any",
        "are",
        "aren",
        "aren't",
        "as",
        "at",
        "be",
        "because",
        "been",
        "before",
        "being",
        "below",
        "between",
        "both",
        "but",
        "by",
        "can",
        "couldn",
        "couldn't",
        "d",
        "did",
        "didn",
        "didn't",
        "do",
        "does",
        "doesn",
        "doesn't",
        "doing",
        "don",
        "don't",
        "down",
        "during",
        "each",
        "few",
        "for",
        "from",
        "further",
        "g",
        "had",
        "hadn",
        "hadn't",
        "has",
        "hasn",
        "hasn't",
        "have",
        "haven",
        "haven't",
        "having",
        "he",
        "her",
        "here",
        "hers",
        "herself",
        "him",
        "himself",
        "his",
        "how",
        "i",
        "ii",
        "if",
        "in",
        "into",
        "is",
        "isn",
        "isn't",
        "it",
        "it's",
        "its",
        "itself",
        "just",
        "like",
        "ll",
        "m",
        "ma",
        "me",
        "mightn",
        "mightn't",
        "more",
        "most",
        "mustn",
        "mustn't",
        "my",
        "myself",
        "needn",
        "needn't",
        "no",
        "nor",
        "not",
        "now",
        "o",
        "of",
        "off",
        "on",
        "once",
        "only",
        "or",
        "other",
        "our",
        "ours",
        "ourselves",
        "out",
        "over",
        "own",
        "pre",
        "post",
        "re",
        "s",
        "same",
        "shan",
        "shan't",
        "she",
        "she's",
        "should",
        "should've",
        "shouldn",
        "shouldn't",
        "so",
        "some",
        "such",
        "than",
        "that",
        "that'll",
        "the",
        "their",
        "theirs",
        "them",
        "themselves",
        "then",
        "there",
        "these",
        "they",
        "this",
        "those",
        "through",
        "to",
        "too",
        "under",
        "until",
        "up",
        "ve",
        "very",
        "via",
        "was",
        "wasn",
        "wasn't",
        "we",
        "were",
        "weren",
        "weren't",
        "what",
        "when",
        "where",
        "which",
        "while",
        "who",
        "whom",
        "why",
        "will",
        "with",
        "within",
        "without",
        "won",
        "won't",
        "wouldn",
        "wouldn't",
        "y",
        "you",
        "you'd",
        "you'll",
        "you're",
        "you've",
        "your",
        "yours",
        "yourself",
        "yourselves",
    }


def _get_wrappers() -> dict[str, dict[str, Any]]:
    """Get the wrapper functions used by GORi to handle specific priors.

    Returns
        A dict associating wrapper labels (keys) to their prior-specific functions (values).
    """
    return {
        "ancestors_wrapper": ancestors_wrapper(),
        "annotations_wrapper": annotations_wrapper(),
        "descendants_wrapper": descendants_wrapper(),
        "download_wrapper": download_wrapper(),
        "headers_wrapper": headers_wrapper(),
        "inverse_translate_wrapper": inverse_translate_wrapper(),
        "load_wrapper": load_wrapper(),
        "resources_wrapper": resources_wrapper(),
        "roots_wrapper": roots_wrapper(),
        "setup_wrapper": setup_wrapper(),
        "terms_wrapper": terms_wrapper(),
        "translate_wrapper": translate_wrapper(),
        "urls_wrapper": urls_wrapper(),
    }


def get_parameters() -> dict[str, Any]:
    """Get parameters for a GORi enrichment analysis.

    The parameters are stored in a dict:
        `n_genes_threshold` and `pvalues_threshold` are numerics used to filter out weak associations.
        `heuristic` is a boolean indicating if the heuristic approach should be used by GORi.
        `use_gene_symbol` is a boolean indicating if the gene symbols should be used.
        `sheets_path` is a path where the results of the analysis will be stored.
        "report_path" is a path where the HTML report will be stored.
        `wrappers` is a dict of prior-specifc functions.
        `stopwords` is a set of words that should not be used in GORi.

    Returns
        A dict with 8 keys: `n_genes_threshold`, `pvalue_threshold`, `use_heuristic`,
        `use_gene_symbol`, `sheets_path`, `report_path`, `wrappers` and `stopwords`.
    """
    parameters = {
        "n_genes_threshold": 5,
        "pvalue_threshold": 0.05,
        "use_heuristic": True,
        "use_gene_symbol": True,
        "sheets_path": "./GORi.xlsx",
        "report_path": "./GORi.html",
        "wrappers": _get_wrappers(),
        "stopwords": _get_stopwords(),
    }
    return parameters
